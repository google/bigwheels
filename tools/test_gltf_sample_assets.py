"""Loads and renders all scenes in glTF-Sample-Assets."""

import argparse
import datetime
import json
import os
import pathlib
import socket
import subprocess


def _get_git_head_commit(path: pathlib.Path) -> str:
  """Returns the repository HEAD commit SHA.

  Args:
    path: The path on disk to the git repository (or a subdirectory).

  Returns:
    The full SHA of the HEAD commit of the provided git repo.

  Raises:
    subprocess.CalledProcessError: git failed (e.g. `path` is not a repo).
  """
  process = subprocess.run(
      ['git', 'rev-parse', 'HEAD'], cwd=path, capture_output=True, check=True)
  return process.stdout.decode().strip()


def _build_test_cases(model_index) -> dict[str, str]:
  """Transforms model-index.json into a flat list of test cases to be run.

  Args:
    model_index: glTF-Sample-Assets model-index.json, loaded into memory.

  Returns:
    Mapping of test name to test asset. The test name is `name-variant`.
  """
  test_cases: dict[str, str] = {}
  for model in model_index:
    name = model['name']
    variants = model['variants']
    for variant in variants:
      variant_file = variants[variant]
      test_cases[f'{name}-{variant}'] = (
          f'glTF-Sample-Assets/Models/{name}/{variant}/{variant_file}')
  return test_cases


def _run_test(program: pathlib.Path,
              asset: str,
              output_path: pathlib.Path):
  """Loads and renders a glTF-Sample-Asset scene.

  Several outputs are written to disk:

  - actual.ppm: Screenshot (if the scene rendered)
  - ppx.log: Log generated by BigWheels
  - stdout.log: stdout of `program`
  - stderr.log stderr of `program`

  Args:
    program: The program under test used to render the asset under test.
    asset: The glTF-Sample-Asset under test.
    output_path: Empty directory to store test results.
  """
  command = [program,
             '--frame-count', '2',
             '--screenshot-frame-number', '1',
             '--gltf-scene-asset', asset,
             '--screenshot-path', 'actual.ppm',
             '--headless']
  process = subprocess.run(
      command, cwd=output_path, capture_output=True, check=False)

  # Dump debugging information to disk for triaging after a test run
  (output_path / 'stdout.log').write_bytes(process.stdout)
  (output_path / 'stderr.log').write_bytes(process.stderr)


def main():
  """Loads and renders all scenes in glTF-Sample-Assets."""
  parser = argparse.ArgumentParser(
      description='Loads and renders all glTF-Sample-Assets.')
  parser.add_argument('--program', type=pathlib.Path, required=True,
                      help=('The program used to load and render a glTF ' +
                            'scene. Must support --gltf-scene-asset and ' +
                            'other BigWheels options.'))
  parser.add_argument('--model-index', type=pathlib.Path, required=True,
                      help='Path to glTF-Sample-Asssets model-index.json.')
  parser.add_argument('--output', type=pathlib.Path, required=True,
                      help='Directory to store test results.')
  args = parser.parse_args()

  program = args.program.resolve()

  with args.model_index.open('r') as model_index_file:
    model_index = json.load(model_index_file)

  os.mkdir(args.output)

  # Dump some state of the test environment to be included in the report.
  bigwheels_commit_sha = _get_git_head_commit(
      pathlib.Path(__file__).parent.resolve())
  assets_commit_sha = _get_git_head_commit(args.model_index.parent.resolve())
  with (args.output / 'meta.json').open('w') as meta_file:
    json.dump({'host': str(socket.getfqdn()),
               'datetime': str(datetime.datetime.now()),
               'bigwheels_commit_sha': bigwheels_commit_sha,
               'glTF-Sample-Assets_commit_sha': assets_commit_sha}, meta_file)

  test_cases = _build_test_cases(model_index)
  test_count = len(test_cases)  # Used for printing progress
  test_index = 1  # Used for printing progress
  for test_name in test_cases:
    print(f'{test_index}/{test_count}: {test_name}')

    test_output_path = args.output / test_name
    os.mkdir(test_output_path)
    _run_test(program, test_cases[test_name], test_output_path)

    test_index += 1


if __name__ == '__main__':
  main()
