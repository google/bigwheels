// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics_report.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metrics_5freport_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_metrics_5freport_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h" // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_metrics_5freport_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
} // namespace internal
} // namespace protobuf
} // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_metrics_5freport_2eproto
{
    static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_metrics_5freport_2eproto;
namespace ppx {
namespace metrics {
namespace reporting {
class GaugeStatistics;
struct GaugeStatisticsDefaultTypeInternal;
extern GaugeStatisticsDefaultTypeInternal _GaugeStatistics_default_instance_;
class MetricCounter;
struct MetricCounterDefaultTypeInternal;
extern MetricCounterDefaultTypeInternal _MetricCounter_default_instance_;
class MetricGauge;
struct MetricGaugeDefaultTypeInternal;
extern MetricGaugeDefaultTypeInternal _MetricGauge_default_instance_;
class MetricMetadata;
struct MetricMetadataDefaultTypeInternal;
extern MetricMetadataDefaultTypeInternal _MetricMetadata_default_instance_;
class Range;
struct RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class Report;
struct ReportDefaultTypeInternal;
extern ReportDefaultTypeInternal _Report_default_instance_;
class Run;
struct RunDefaultTypeInternal;
extern RunDefaultTypeInternal _Run_default_instance_;
class TimeSeriesEntry;
struct TimeSeriesEntryDefaultTypeInternal;
extern TimeSeriesEntryDefaultTypeInternal _TimeSeriesEntry_default_instance_;
} // namespace reporting
} // namespace metrics
} // namespace ppx
namespace google {
namespace protobuf {
template <>
::ppx::metrics::reporting::GaugeStatistics* Arena::CreateMaybeMessage<::ppx::metrics::reporting::GaugeStatistics>(Arena*);
template <>
::ppx::metrics::reporting::MetricCounter* Arena::CreateMaybeMessage<::ppx::metrics::reporting::MetricCounter>(Arena*);
template <>
::ppx::metrics::reporting::MetricGauge* Arena::CreateMaybeMessage<::ppx::metrics::reporting::MetricGauge>(Arena*);
template <>
::ppx::metrics::reporting::MetricMetadata* Arena::CreateMaybeMessage<::ppx::metrics::reporting::MetricMetadata>(Arena*);
template <>
::ppx::metrics::reporting::Range* Arena::CreateMaybeMessage<::ppx::metrics::reporting::Range>(Arena*);
template <>
::ppx::metrics::reporting::Report* Arena::CreateMaybeMessage<::ppx::metrics::reporting::Report>(Arena*);
template <>
::ppx::metrics::reporting::Run* Arena::CreateMaybeMessage<::ppx::metrics::reporting::Run>(Arena*);
template <>
::ppx::metrics::reporting::TimeSeriesEntry* Arena::CreateMaybeMessage<::ppx::metrics::reporting::TimeSeriesEntry>(Arena*);
} // namespace protobuf
} // namespace google

namespace ppx {
namespace metrics {
namespace reporting {
enum Interpretation : int
{
    NONE             = 0,
    HIGHER_IS_BETTER = 1,
    LOWER_IS_BETTER  = 2,
    Interpretation_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::int32_t>::min(),
    Interpretation_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::int32_t>::max(),
};

bool                     Interpretation_IsValid(int value);
constexpr Interpretation Interpretation_MIN       = static_cast<Interpretation>(0);
constexpr Interpretation Interpretation_MAX       = static_cast<Interpretation>(2);
constexpr int            Interpretation_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Interpretation_descriptor();
template <typename T>
const std::string& Interpretation_Name(T value)
{
    static_assert(std::is_same<T, Interpretation>::value || std::is_integral<T>::value, "Incorrect type passed to Interpretation_Name().");
    return Interpretation_Name(static_cast<Interpretation>(value));
}
template <>
inline const std::string& Interpretation_Name(Interpretation value)
{
    return ::google::protobuf::internal::NameOfDenseEnum<Interpretation_descriptor, 0, 2>(
        static_cast<int>(value));
}
inline bool Interpretation_Parse(absl::string_view name, Interpretation* value)
{
    return ::google::protobuf::internal::ParseNamedEnum<Interpretation>(
        Interpretation_descriptor(), name, value);
}

// ===================================================================

// -------------------------------------------------------------------

class Range final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ppx.metrics.reporting.Range) */
{
public:
    inline Range()
        : Range(nullptr) {}
    ~Range() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR Range(::google::protobuf::internal::ConstantInitialized);

    Range(const Range& from);
    Range(Range&& from) noexcept
        : Range()
    {
        *this = ::std::move(from);
    }

    inline Range& operator=(const Range& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Range& operator=(Range&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const Range& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const Range* internal_default_instance()
    {
        return reinterpret_cast<const Range*>(
            &_Range_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        0;

    friend void swap(Range& a, Range& b)
    {
        a.Swap(&b);
    }
    inline void Swap(Range* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() != nullptr &&
            GetOwningArena() == other->GetOwningArena()) {
#else // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() == other->GetOwningArena()) {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Range* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    Range* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<Range>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const Range& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const Range& from)
    {
        Range::MergeImpl(*this, from);
    }

private:
    static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool                                  IsInitialized() const final;

    ::size_t    ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t*  _InternalSerialize(
         ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Range* other);

private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "ppx.metrics.reporting.Range";
    }

protected:
    explicit Range(::google::protobuf::Arena* arena);

public:
    static const ClassData                        _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kLowerBoundFieldNumber = 1,
        kUpperBoundFieldNumber = 2,
    };
    // double lower_bound = 1;
    void   clear_lower_bound();
    double lower_bound() const;
    void   set_lower_bound(double value);

private:
    double _internal_lower_bound() const;
    void   _internal_set_lower_bound(double value);

public:
    // double upper_bound = 2;
    void   clear_upper_bound();
    double upper_bound() const;
    void   set_upper_bound(double value);

private:
    double _internal_upper_bound() const;
    void   _internal_set_upper_bound(double value);

public:
    // @@protoc_insertion_point(class_scope:ppx.metrics.reporting.Range)
private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_
    {
        double                                           lower_bound_;
        double                                           upper_bound_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_metrics_5freport_2eproto;
}; // -------------------------------------------------------------------

class MetricMetadata final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ppx.metrics.reporting.MetricMetadata) */
{
public:
    inline MetricMetadata()
        : MetricMetadata(nullptr) {}
    ~MetricMetadata() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR MetricMetadata(::google::protobuf::internal::ConstantInitialized);

    MetricMetadata(const MetricMetadata& from);
    MetricMetadata(MetricMetadata&& from) noexcept
        : MetricMetadata()
    {
        *this = ::std::move(from);
    }

    inline MetricMetadata& operator=(const MetricMetadata& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline MetricMetadata& operator=(MetricMetadata&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const MetricMetadata& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const MetricMetadata* internal_default_instance()
    {
        return reinterpret_cast<const MetricMetadata*>(
            &_MetricMetadata_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        1;

    friend void swap(MetricMetadata& a, MetricMetadata& b)
    {
        a.Swap(&b);
    }
    inline void Swap(MetricMetadata* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() != nullptr &&
            GetOwningArena() == other->GetOwningArena()) {
#else // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() == other->GetOwningArena()) {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(MetricMetadata* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    MetricMetadata* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<MetricMetadata>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const MetricMetadata& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const MetricMetadata& from)
    {
        MetricMetadata::MergeImpl(*this, from);
    }

private:
    static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool                                  IsInitialized() const final;

    ::size_t    ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t*  _InternalSerialize(
         ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(MetricMetadata* other);

private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "ppx.metrics.reporting.MetricMetadata";
    }

protected:
    explicit MetricMetadata(::google::protobuf::Arena* arena);

public:
    static const ClassData                        _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kNameFieldNumber           = 1,
        kUnitFieldNumber           = 2,
        kExpectedRangeFieldNumber  = 4,
        kInterpretationFieldNumber = 3,
    };
    // string name = 1;
    void               clear_name();
    const std::string& name() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void               set_name(Arg_&& arg, Args_... args);
    std::string*       mutable_name();
    PROTOBUF_NODISCARD std::string* release_name();
    void                            set_allocated_name(std::string* ptr);

private:
    const std::string&                 _internal_name() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
        const std::string& value);
    std::string* _internal_mutable_name();

public:
    // string unit = 2;
    void               clear_unit();
    const std::string& unit() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void               set_unit(Arg_&& arg, Args_... args);
    std::string*       mutable_unit();
    PROTOBUF_NODISCARD std::string* release_unit();
    void                            set_allocated_unit(std::string* ptr);

private:
    const std::string&                 _internal_unit() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
        const std::string& value);
    std::string* _internal_mutable_unit();

public:
    // .ppx.metrics.reporting.Range expected_range = 4;
    bool                                                 has_expected_range() const;
    void                                                 clear_expected_range();
    const ::ppx::metrics::reporting::Range&              expected_range() const;
    PROTOBUF_NODISCARD ::ppx::metrics::reporting::Range* release_expected_range();
    ::ppx::metrics::reporting::Range*                    mutable_expected_range();
    void                                                 set_allocated_expected_range(::ppx::metrics::reporting::Range* value);
    void                                                 unsafe_arena_set_allocated_expected_range(::ppx::metrics::reporting::Range* value);
    ::ppx::metrics::reporting::Range*                    unsafe_arena_release_expected_range();

private:
    const ::ppx::metrics::reporting::Range& _internal_expected_range() const;
    ::ppx::metrics::reporting::Range*       _internal_mutable_expected_range();

public:
    // .ppx.metrics.reporting.Interpretation interpretation = 3;
    void                                      clear_interpretation();
    ::ppx::metrics::reporting::Interpretation interpretation() const;
    void                                      set_interpretation(::ppx::metrics::reporting::Interpretation value);

private:
    ::ppx::metrics::reporting::Interpretation _internal_interpretation() const;
    void                                      _internal_set_interpretation(::ppx::metrics::reporting::Interpretation value);

public:
    // @@protoc_insertion_point(class_scope:ppx.metrics.reporting.MetricMetadata)
private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 53, 2> _table_;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_
    {
        ::google::protobuf::internal::HasBits<1>         _has_bits_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        ::google::protobuf::internal::ArenaStringPtr     name_;
        ::google::protobuf::internal::ArenaStringPtr     unit_;
        ::ppx::metrics::reporting::Range*                expected_range_;
        int                                              interpretation_;
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_metrics_5freport_2eproto;
}; // -------------------------------------------------------------------

class MetricCounter final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ppx.metrics.reporting.MetricCounter) */
{
public:
    inline MetricCounter()
        : MetricCounter(nullptr) {}
    ~MetricCounter() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR MetricCounter(::google::protobuf::internal::ConstantInitialized);

    MetricCounter(const MetricCounter& from);
    MetricCounter(MetricCounter&& from) noexcept
        : MetricCounter()
    {
        *this = ::std::move(from);
    }

    inline MetricCounter& operator=(const MetricCounter& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline MetricCounter& operator=(MetricCounter&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const MetricCounter& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const MetricCounter* internal_default_instance()
    {
        return reinterpret_cast<const MetricCounter*>(
            &_MetricCounter_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        2;

    friend void swap(MetricCounter& a, MetricCounter& b)
    {
        a.Swap(&b);
    }
    inline void Swap(MetricCounter* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() != nullptr &&
            GetOwningArena() == other->GetOwningArena()) {
#else // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() == other->GetOwningArena()) {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(MetricCounter* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    MetricCounter* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<MetricCounter>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const MetricCounter& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const MetricCounter& from)
    {
        MetricCounter::MergeImpl(*this, from);
    }

private:
    static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool                                  IsInitialized() const final;

    ::size_t    ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t*  _InternalSerialize(
         ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(MetricCounter* other);

private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "ppx.metrics.reporting.MetricCounter";
    }

protected:
    explicit MetricCounter(::google::protobuf::Arena* arena);

public:
    static const ClassData                        _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kMetadataFieldNumber = 1,
        kValueFieldNumber    = 2,
    };
    // .ppx.metrics.reporting.MetricMetadata metadata = 1;
    bool                                                          has_metadata() const;
    void                                                          clear_metadata();
    const ::ppx::metrics::reporting::MetricMetadata&              metadata() const;
    PROTOBUF_NODISCARD ::ppx::metrics::reporting::MetricMetadata* release_metadata();
    ::ppx::metrics::reporting::MetricMetadata*                    mutable_metadata();
    void                                                          set_allocated_metadata(::ppx::metrics::reporting::MetricMetadata* value);
    void                                                          unsafe_arena_set_allocated_metadata(::ppx::metrics::reporting::MetricMetadata* value);
    ::ppx::metrics::reporting::MetricMetadata*                    unsafe_arena_release_metadata();

private:
    const ::ppx::metrics::reporting::MetricMetadata& _internal_metadata() const;
    ::ppx::metrics::reporting::MetricMetadata*       _internal_mutable_metadata();

public:
    // int64 value = 2;
    void      clear_value();
    ::int64_t value() const;
    void      set_value(::int64_t value);

private:
    ::int64_t _internal_value() const;
    void      _internal_set_value(::int64_t value);

public:
    // @@protoc_insertion_point(class_scope:ppx.metrics.reporting.MetricCounter)
private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_
    {
        ::google::protobuf::internal::HasBits<1>         _has_bits_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        ::ppx::metrics::reporting::MetricMetadata*       metadata_;
        ::int64_t                                        value_;
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_metrics_5freport_2eproto;
}; // -------------------------------------------------------------------

class GaugeStatistics final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ppx.metrics.reporting.GaugeStatistics) */
{
public:
    inline GaugeStatistics()
        : GaugeStatistics(nullptr) {}
    ~GaugeStatistics() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR GaugeStatistics(::google::protobuf::internal::ConstantInitialized);

    GaugeStatistics(const GaugeStatistics& from);
    GaugeStatistics(GaugeStatistics&& from) noexcept
        : GaugeStatistics()
    {
        *this = ::std::move(from);
    }

    inline GaugeStatistics& operator=(const GaugeStatistics& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline GaugeStatistics& operator=(GaugeStatistics&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const GaugeStatistics& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const GaugeStatistics* internal_default_instance()
    {
        return reinterpret_cast<const GaugeStatistics*>(
            &_GaugeStatistics_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        3;

    friend void swap(GaugeStatistics& a, GaugeStatistics& b)
    {
        a.Swap(&b);
    }
    inline void Swap(GaugeStatistics* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() != nullptr &&
            GetOwningArena() == other->GetOwningArena()) {
#else // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() == other->GetOwningArena()) {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(GaugeStatistics* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    GaugeStatistics* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<GaugeStatistics>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const GaugeStatistics& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const GaugeStatistics& from)
    {
        GaugeStatistics::MergeImpl(*this, from);
    }

private:
    static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool                                  IsInitialized() const final;

    ::size_t    ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t*  _InternalSerialize(
         ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(GaugeStatistics* other);

private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "ppx.metrics.reporting.GaugeStatistics";
    }

protected:
    explicit GaugeStatistics(::google::protobuf::Arena* arena);

public:
    static const ClassData                        _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kMinFieldNumber               = 1,
        kMaxFieldNumber               = 2,
        kAverageFieldNumber           = 3,
        kTimeRatioFieldNumber         = 4,
        kMedianFieldNumber            = 5,
        kStandardDeviationFieldNumber = 6,
        kPercentile90FieldNumber      = 7,
        kPercentile95FieldNumber      = 8,
        kPercentile99FieldNumber      = 9,
    };
    // double min = 1;
    void   clear_min();
    double min() const;
    void   set_min(double value);

private:
    double _internal_min() const;
    void   _internal_set_min(double value);

public:
    // double max = 2;
    void   clear_max();
    double max() const;
    void   set_max(double value);

private:
    double _internal_max() const;
    void   _internal_set_max(double value);

public:
    // double average = 3;
    void   clear_average();
    double average() const;
    void   set_average(double value);

private:
    double _internal_average() const;
    void   _internal_set_average(double value);

public:
    // double time_ratio = 4;
    void   clear_time_ratio();
    double time_ratio() const;
    void   set_time_ratio(double value);

private:
    double _internal_time_ratio() const;
    void   _internal_set_time_ratio(double value);

public:
    // double median = 5;
    void   clear_median();
    double median() const;
    void   set_median(double value);

private:
    double _internal_median() const;
    void   _internal_set_median(double value);

public:
    // double standard_deviation = 6;
    void   clear_standard_deviation();
    double standard_deviation() const;
    void   set_standard_deviation(double value);

private:
    double _internal_standard_deviation() const;
    void   _internal_set_standard_deviation(double value);

public:
    // double percentile_90 = 7;
    void   clear_percentile_90();
    double percentile_90() const;
    void   set_percentile_90(double value);

private:
    double _internal_percentile_90() const;
    void   _internal_set_percentile_90(double value);

public:
    // double percentile_95 = 8;
    void   clear_percentile_95();
    double percentile_95() const;
    void   set_percentile_95(double value);

private:
    double _internal_percentile_95() const;
    void   _internal_set_percentile_95(double value);

public:
    // double percentile_99 = 9;
    void   clear_percentile_99();
    double percentile_99() const;
    void   set_percentile_99(double value);

private:
    double _internal_percentile_99() const;
    void   _internal_set_percentile_99(double value);

public:
    // @@protoc_insertion_point(class_scope:ppx.metrics.reporting.GaugeStatistics)
private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<4, 9, 0, 0, 2> _table_;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_
    {
        double                                           min_;
        double                                           max_;
        double                                           average_;
        double                                           time_ratio_;
        double                                           median_;
        double                                           standard_deviation_;
        double                                           percentile_90_;
        double                                           percentile_95_;
        double                                           percentile_99_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_metrics_5freport_2eproto;
}; // -------------------------------------------------------------------

class TimeSeriesEntry final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ppx.metrics.reporting.TimeSeriesEntry) */
{
public:
    inline TimeSeriesEntry()
        : TimeSeriesEntry(nullptr) {}
    ~TimeSeriesEntry() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR TimeSeriesEntry(::google::protobuf::internal::ConstantInitialized);

    TimeSeriesEntry(const TimeSeriesEntry& from);
    TimeSeriesEntry(TimeSeriesEntry&& from) noexcept
        : TimeSeriesEntry()
    {
        *this = ::std::move(from);
    }

    inline TimeSeriesEntry& operator=(const TimeSeriesEntry& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline TimeSeriesEntry& operator=(TimeSeriesEntry&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const TimeSeriesEntry& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const TimeSeriesEntry* internal_default_instance()
    {
        return reinterpret_cast<const TimeSeriesEntry*>(
            &_TimeSeriesEntry_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        4;

    friend void swap(TimeSeriesEntry& a, TimeSeriesEntry& b)
    {
        a.Swap(&b);
    }
    inline void Swap(TimeSeriesEntry* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() != nullptr &&
            GetOwningArena() == other->GetOwningArena()) {
#else // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() == other->GetOwningArena()) {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(TimeSeriesEntry* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    TimeSeriesEntry* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<TimeSeriesEntry>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const TimeSeriesEntry& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const TimeSeriesEntry& from)
    {
        TimeSeriesEntry::MergeImpl(*this, from);
    }

private:
    static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool                                  IsInitialized() const final;

    ::size_t    ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t*  _InternalSerialize(
         ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(TimeSeriesEntry* other);

private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "ppx.metrics.reporting.TimeSeriesEntry";
    }

protected:
    explicit TimeSeriesEntry(::google::protobuf::Arena* arena);

public:
    static const ClassData                        _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kSecondsFieldNumber = 1,
        kValueFieldNumber   = 2,
    };
    // double seconds = 1;
    void   clear_seconds();
    double seconds() const;
    void   set_seconds(double value);

private:
    double _internal_seconds() const;
    void   _internal_set_seconds(double value);

public:
    // double value = 2;
    void   clear_value();
    double value() const;
    void   set_value(double value);

private:
    double _internal_value() const;
    void   _internal_set_value(double value);

public:
    // @@protoc_insertion_point(class_scope:ppx.metrics.reporting.TimeSeriesEntry)
private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_
    {
        double                                           seconds_;
        double                                           value_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_metrics_5freport_2eproto;
}; // -------------------------------------------------------------------

class MetricGauge final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ppx.metrics.reporting.MetricGauge) */
{
public:
    inline MetricGauge()
        : MetricGauge(nullptr) {}
    ~MetricGauge() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR MetricGauge(::google::protobuf::internal::ConstantInitialized);

    MetricGauge(const MetricGauge& from);
    MetricGauge(MetricGauge&& from) noexcept
        : MetricGauge()
    {
        *this = ::std::move(from);
    }

    inline MetricGauge& operator=(const MetricGauge& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline MetricGauge& operator=(MetricGauge&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const MetricGauge& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const MetricGauge* internal_default_instance()
    {
        return reinterpret_cast<const MetricGauge*>(
            &_MetricGauge_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        5;

    friend void swap(MetricGauge& a, MetricGauge& b)
    {
        a.Swap(&b);
    }
    inline void Swap(MetricGauge* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() != nullptr &&
            GetOwningArena() == other->GetOwningArena()) {
#else // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() == other->GetOwningArena()) {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(MetricGauge* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    MetricGauge* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<MetricGauge>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const MetricGauge& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const MetricGauge& from)
    {
        MetricGauge::MergeImpl(*this, from);
    }

private:
    static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool                                  IsInitialized() const final;

    ::size_t    ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t*  _InternalSerialize(
         ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(MetricGauge* other);

private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "ppx.metrics.reporting.MetricGauge";
    }

protected:
    explicit MetricGauge(::google::protobuf::Arena* arena);

public:
    static const ClassData                        _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kTimeSeriesFieldNumber = 3,
        kMetadataFieldNumber   = 1,
        kStatisticsFieldNumber = 2,
    };
    // repeated .ppx.metrics.reporting.TimeSeriesEntry time_series = 3;
    int time_series_size() const;

private:
    int _internal_time_series_size() const;

public:
    void                                        clear_time_series();
    ::ppx::metrics::reporting::TimeSeriesEntry* mutable_time_series(int index);
    ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::TimeSeriesEntry>*
    mutable_time_series();

private:
    const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::TimeSeriesEntry>& _internal_time_series() const;
    ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::TimeSeriesEntry>*       _internal_mutable_time_series();

public:
    const ::ppx::metrics::reporting::TimeSeriesEntry& time_series(int index) const;
    ::ppx::metrics::reporting::TimeSeriesEntry*       add_time_series();
    const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::TimeSeriesEntry>&
    time_series() const;
    // .ppx.metrics.reporting.MetricMetadata metadata = 1;
    bool                                                          has_metadata() const;
    void                                                          clear_metadata();
    const ::ppx::metrics::reporting::MetricMetadata&              metadata() const;
    PROTOBUF_NODISCARD ::ppx::metrics::reporting::MetricMetadata* release_metadata();
    ::ppx::metrics::reporting::MetricMetadata*                    mutable_metadata();
    void                                                          set_allocated_metadata(::ppx::metrics::reporting::MetricMetadata* value);
    void                                                          unsafe_arena_set_allocated_metadata(::ppx::metrics::reporting::MetricMetadata* value);
    ::ppx::metrics::reporting::MetricMetadata*                    unsafe_arena_release_metadata();

private:
    const ::ppx::metrics::reporting::MetricMetadata& _internal_metadata() const;
    ::ppx::metrics::reporting::MetricMetadata*       _internal_mutable_metadata();

public:
    // .ppx.metrics.reporting.GaugeStatistics statistics = 2;
    bool                                                           has_statistics() const;
    void                                                           clear_statistics();
    const ::ppx::metrics::reporting::GaugeStatistics&              statistics() const;
    PROTOBUF_NODISCARD ::ppx::metrics::reporting::GaugeStatistics* release_statistics();
    ::ppx::metrics::reporting::GaugeStatistics*                    mutable_statistics();
    void                                                           set_allocated_statistics(::ppx::metrics::reporting::GaugeStatistics* value);
    void                                                           unsafe_arena_set_allocated_statistics(::ppx::metrics::reporting::GaugeStatistics* value);
    ::ppx::metrics::reporting::GaugeStatistics*                    unsafe_arena_release_statistics();

private:
    const ::ppx::metrics::reporting::GaugeStatistics& _internal_statistics() const;
    ::ppx::metrics::reporting::GaugeStatistics*       _internal_mutable_statistics();

public:
    // @@protoc_insertion_point(class_scope:ppx.metrics.reporting.MetricGauge)
private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<2, 3, 3, 0, 2> _table_;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_
    {
        ::google::protobuf::internal::HasBits<1>                                         _has_bits_;
        mutable ::google::protobuf::internal::CachedSize                                 _cached_size_;
        ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::TimeSeriesEntry> time_series_;
        ::ppx::metrics::reporting::MetricMetadata*                                       metadata_;
        ::ppx::metrics::reporting::GaugeStatistics*                                      statistics_;
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_metrics_5freport_2eproto;
}; // -------------------------------------------------------------------

class Run final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ppx.metrics.reporting.Run) */
{
public:
    inline Run()
        : Run(nullptr) {}
    ~Run() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR Run(::google::protobuf::internal::ConstantInitialized);

    Run(const Run& from);
    Run(Run&& from) noexcept
        : Run()
    {
        *this = ::std::move(from);
    }

    inline Run& operator=(const Run& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Run& operator=(Run&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const Run& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const Run* internal_default_instance()
    {
        return reinterpret_cast<const Run*>(
            &_Run_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        6;

    friend void swap(Run& a, Run& b)
    {
        a.Swap(&b);
    }
    inline void Swap(Run* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() != nullptr &&
            GetOwningArena() == other->GetOwningArena()) {
#else // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() == other->GetOwningArena()) {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Run* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    Run* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<Run>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const Run& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const Run& from)
    {
        Run::MergeImpl(*this, from);
    }

private:
    static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool                                  IsInitialized() const final;

    ::size_t    ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t*  _InternalSerialize(
         ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Run* other);

private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "ppx.metrics.reporting.Run";
    }

protected:
    explicit Run(::google::protobuf::Arena* arena);

public:
    static const ClassData                        _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kCountersFieldNumber = 2,
        kGaugesFieldNumber   = 3,
        kNameFieldNumber     = 1,
    };
    // repeated .ppx.metrics.reporting.MetricCounter counters = 2;
    int counters_size() const;

private:
    int _internal_counters_size() const;

public:
    void                                      clear_counters();
    ::ppx::metrics::reporting::MetricCounter* mutable_counters(int index);
    ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricCounter>*
    mutable_counters();

private:
    const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricCounter>& _internal_counters() const;
    ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricCounter>*       _internal_mutable_counters();

public:
    const ::ppx::metrics::reporting::MetricCounter& counters(int index) const;
    ::ppx::metrics::reporting::MetricCounter*       add_counters();
    const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricCounter>&
    counters() const;
    // repeated .ppx.metrics.reporting.MetricGauge gauges = 3;
    int gauges_size() const;

private:
    int _internal_gauges_size() const;

public:
    void                                    clear_gauges();
    ::ppx::metrics::reporting::MetricGauge* mutable_gauges(int index);
    ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricGauge>*
    mutable_gauges();

private:
    const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricGauge>& _internal_gauges() const;
    ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricGauge>*       _internal_mutable_gauges();

public:
    const ::ppx::metrics::reporting::MetricGauge& gauges(int index) const;
    ::ppx::metrics::reporting::MetricGauge*       add_gauges();
    const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricGauge>&
    gauges() const;
    // string name = 1;
    void               clear_name();
    const std::string& name() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void               set_name(Arg_&& arg, Args_... args);
    std::string*       mutable_name();
    PROTOBUF_NODISCARD std::string* release_name();
    void                            set_allocated_name(std::string* ptr);

private:
    const std::string&                 _internal_name() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
        const std::string& value);
    std::string* _internal_mutable_name();

public:
    // @@protoc_insertion_point(class_scope:ppx.metrics.reporting.Run)
private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 38, 2> _table_;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_
    {
        ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricCounter> counters_;
        ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricGauge>   gauges_;
        ::google::protobuf::internal::ArenaStringPtr                                   name_;
        mutable ::google::protobuf::internal::CachedSize                               _cached_size_;
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_metrics_5freport_2eproto;
}; // -------------------------------------------------------------------

class Report final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ppx.metrics.reporting.Report) */
{
public:
    inline Report()
        : Report(nullptr) {}
    ~Report() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR Report(::google::protobuf::internal::ConstantInitialized);

    Report(const Report& from);
    Report(Report&& from) noexcept
        : Report()
    {
        *this = ::std::move(from);
    }

    inline Report& operator=(const Report& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Report& operator=(Report&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        }
        else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
    {
        return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const Report& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const Report* internal_default_instance()
    {
        return reinterpret_cast<const Report*>(
            &_Report_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        7;

    friend void swap(Report& a, Report& b)
    {
        a.Swap(&b);
    }
    inline void Swap(Report* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() != nullptr &&
            GetOwningArena() == other->GetOwningArena()) {
#else // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetOwningArena() == other->GetOwningArena()) {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Report* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    Report* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<Report>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const Report& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const Report& from)
    {
        Report::MergeImpl(*this, from);
    }

private:
    static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool                                  IsInitialized() const final;

    ::size_t    ByteSizeLong() const final;
    const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t*  _InternalSerialize(
         ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Report* other);

private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "ppx.metrics.reporting.Report";
    }

protected:
    explicit Report(::google::protobuf::Arena* arena);

public:
    static const ClassData                        _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kRunsFieldNumber = 2,
        kNameFieldNumber = 1,
    };
    // repeated .ppx.metrics.reporting.Run runs = 2;
    int runs_size() const;

private:
    int _internal_runs_size() const;

public:
    void                            clear_runs();
    ::ppx::metrics::reporting::Run* mutable_runs(int index);
    ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::Run>*
    mutable_runs();

private:
    const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::Run>& _internal_runs() const;
    ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::Run>*       _internal_mutable_runs();

public:
    const ::ppx::metrics::reporting::Run& runs(int index) const;
    ::ppx::metrics::reporting::Run*       add_runs();
    const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::Run>&
    runs() const;
    // string name = 1;
    void               clear_name();
    const std::string& name() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void               set_name(Arg_&& arg, Args_... args);
    std::string*       mutable_name();
    PROTOBUF_NODISCARD std::string* release_name();
    void                            set_allocated_name(std::string* ptr);

private:
    const std::string&                 _internal_name() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
        const std::string& value);
    std::string* _internal_mutable_name();

public:
    // @@protoc_insertion_point(class_scope:ppx.metrics.reporting.Report)
private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 41, 2> _table_;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_
    {
        ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::Run> runs_;
        ::google::protobuf::internal::ArenaStringPtr                         name_;
        mutable ::google::protobuf::internal::CachedSize                     _cached_size_;
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_metrics_5freport_2eproto;
};

// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// -------------------------------------------------------------------

// Range

// double lower_bound = 1;
inline void Range::clear_lower_bound()
{
    _impl_.lower_bound_ = 0;
}
inline double Range::lower_bound() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.Range.lower_bound)
    return _internal_lower_bound();
}
inline void Range::set_lower_bound(double value)
{
    _internal_set_lower_bound(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.Range.lower_bound)
}
inline double Range::_internal_lower_bound() const
{
    return _impl_.lower_bound_;
}
inline void Range::_internal_set_lower_bound(double value)
{
    ;
    _impl_.lower_bound_ = value;
}

// double upper_bound = 2;
inline void Range::clear_upper_bound()
{
    _impl_.upper_bound_ = 0;
}
inline double Range::upper_bound() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.Range.upper_bound)
    return _internal_upper_bound();
}
inline void Range::set_upper_bound(double value)
{
    _internal_set_upper_bound(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.Range.upper_bound)
}
inline double Range::_internal_upper_bound() const
{
    return _impl_.upper_bound_;
}
inline void Range::_internal_set_upper_bound(double value)
{
    ;
    _impl_.upper_bound_ = value;
}

// -------------------------------------------------------------------

// MetricMetadata

// string name = 1;
inline void MetricMetadata::clear_name()
{
    _impl_.name_.ClearToEmpty();
}
inline const std::string& MetricMetadata::name() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.MetricMetadata.name)
    return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetricMetadata::set_name(Arg_&& arg, Args_... args)
{
    ;
    _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.MetricMetadata.name)
}
inline std::string* MetricMetadata::mutable_name()
{
    std::string* _s = _internal_mutable_name();
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.MetricMetadata.name)
    return _s;
}
inline const std::string& MetricMetadata::_internal_name() const
{
    return _impl_.name_.Get();
}
inline void MetricMetadata::_internal_set_name(const std::string& value)
{
    ;
    _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MetricMetadata::_internal_mutable_name()
{
    ;
    return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MetricMetadata::release_name()
{
    // @@protoc_insertion_point(field_release:ppx.metrics.reporting.MetricMetadata.name)
    return _impl_.name_.Release();
}
inline void MetricMetadata::set_allocated_name(std::string* value)
{
    _impl_.name_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.name_.IsDefault()) {
        _impl_.name_.Set("", GetArenaForAllocation());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:ppx.metrics.reporting.MetricMetadata.name)
}

// string unit = 2;
inline void MetricMetadata::clear_unit()
{
    _impl_.unit_.ClearToEmpty();
}
inline const std::string& MetricMetadata::unit() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.MetricMetadata.unit)
    return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MetricMetadata::set_unit(Arg_&& arg, Args_... args)
{
    ;
    _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.MetricMetadata.unit)
}
inline std::string* MetricMetadata::mutable_unit()
{
    std::string* _s = _internal_mutable_unit();
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.MetricMetadata.unit)
    return _s;
}
inline const std::string& MetricMetadata::_internal_unit() const
{
    return _impl_.unit_.Get();
}
inline void MetricMetadata::_internal_set_unit(const std::string& value)
{
    ;
    _impl_.unit_.Set(value, GetArenaForAllocation());
}
inline std::string* MetricMetadata::_internal_mutable_unit()
{
    ;
    return _impl_.unit_.Mutable(GetArenaForAllocation());
}
inline std::string* MetricMetadata::release_unit()
{
    // @@protoc_insertion_point(field_release:ppx.metrics.reporting.MetricMetadata.unit)
    return _impl_.unit_.Release();
}
inline void MetricMetadata::set_allocated_unit(std::string* value)
{
    _impl_.unit_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.unit_.IsDefault()) {
        _impl_.unit_.Set("", GetArenaForAllocation());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:ppx.metrics.reporting.MetricMetadata.unit)
}

// .ppx.metrics.reporting.Interpretation interpretation = 3;
inline void MetricMetadata::clear_interpretation()
{
    _impl_.interpretation_ = 0;
}
inline ::ppx::metrics::reporting::Interpretation MetricMetadata::interpretation() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.MetricMetadata.interpretation)
    return _internal_interpretation();
}
inline void MetricMetadata::set_interpretation(::ppx::metrics::reporting::Interpretation value)
{
    _internal_set_interpretation(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.MetricMetadata.interpretation)
}
inline ::ppx::metrics::reporting::Interpretation MetricMetadata::_internal_interpretation() const
{
    return static_cast<::ppx::metrics::reporting::Interpretation>(_impl_.interpretation_);
}
inline void MetricMetadata::_internal_set_interpretation(::ppx::metrics::reporting::Interpretation value)
{
    ;
    _impl_.interpretation_ = value;
}

// .ppx.metrics.reporting.Range expected_range = 4;
inline bool MetricMetadata::has_expected_range() const
{
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.expected_range_ != nullptr);
    return value;
}
inline void MetricMetadata::clear_expected_range()
{
    if (_impl_.expected_range_ != nullptr)
        _impl_.expected_range_->Clear();
    _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ppx::metrics::reporting::Range& MetricMetadata::_internal_expected_range() const
{
    const ::ppx::metrics::reporting::Range* p = _impl_.expected_range_;
    return p != nullptr ? *p : reinterpret_cast<const ::ppx::metrics::reporting::Range&>(::ppx::metrics::reporting::_Range_default_instance_);
}
inline const ::ppx::metrics::reporting::Range& MetricMetadata::expected_range() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.MetricMetadata.expected_range)
    return _internal_expected_range();
}
inline void MetricMetadata::unsafe_arena_set_allocated_expected_range(::ppx::metrics::reporting::Range* value)
{
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expected_range_);
    }
    _impl_.expected_range_ = reinterpret_cast<::ppx::metrics::reporting::Range*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    }
    else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ppx.metrics.reporting.MetricMetadata.expected_range)
}
inline ::ppx::metrics::reporting::Range* MetricMetadata::release_expected_range()
{
    _impl_._has_bits_[0] &= ~0x00000001u;
    ::ppx::metrics::reporting::Range* released = _impl_.expected_range_;
    _impl_.expected_range_                     = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released  = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::ppx::metrics::reporting::Range* MetricMetadata::unsafe_arena_release_expected_range()
{
    // @@protoc_insertion_point(field_release:ppx.metrics.reporting.MetricMetadata.expected_range)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::ppx::metrics::reporting::Range* temp = _impl_.expected_range_;
    _impl_.expected_range_                 = nullptr;
    return temp;
}
inline ::ppx::metrics::reporting::Range* MetricMetadata::_internal_mutable_expected_range()
{
    _impl_._has_bits_[0] |= 0x00000001u;
    if (_impl_.expected_range_ == nullptr) {
        auto* p                = CreateMaybeMessage<::ppx::metrics::reporting::Range>(GetArenaForAllocation());
        _impl_.expected_range_ = reinterpret_cast<::ppx::metrics::reporting::Range*>(p);
    }
    return _impl_.expected_range_;
}
inline ::ppx::metrics::reporting::Range* MetricMetadata::mutable_expected_range()
{
    ::ppx::metrics::reporting::Range* _msg = _internal_mutable_expected_range();
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.MetricMetadata.expected_range)
    return _msg;
}
inline void MetricMetadata::set_allocated_expected_range(::ppx::metrics::reporting::Range* value)
{
    ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete reinterpret_cast<::ppx::metrics::reporting::Range*>(_impl_.expected_range_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena =
            ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::ppx::metrics::reporting::Range*>(value));
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    }
    else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.expected_range_ = reinterpret_cast<::ppx::metrics::reporting::Range*>(value);
    // @@protoc_insertion_point(field_set_allocated:ppx.metrics.reporting.MetricMetadata.expected_range)
}

// -------------------------------------------------------------------

// MetricCounter

// .ppx.metrics.reporting.MetricMetadata metadata = 1;
inline bool MetricCounter::has_metadata() const
{
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
    return value;
}
inline void MetricCounter::clear_metadata()
{
    if (_impl_.metadata_ != nullptr)
        _impl_.metadata_->Clear();
    _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ppx::metrics::reporting::MetricMetadata& MetricCounter::_internal_metadata() const
{
    const ::ppx::metrics::reporting::MetricMetadata* p = _impl_.metadata_;
    return p != nullptr ? *p : reinterpret_cast<const ::ppx::metrics::reporting::MetricMetadata&>(::ppx::metrics::reporting::_MetricMetadata_default_instance_);
}
inline const ::ppx::metrics::reporting::MetricMetadata& MetricCounter::metadata() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.MetricCounter.metadata)
    return _internal_metadata();
}
inline void MetricCounter::unsafe_arena_set_allocated_metadata(::ppx::metrics::reporting::MetricMetadata* value)
{
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
    }
    _impl_.metadata_ = reinterpret_cast<::ppx::metrics::reporting::MetricMetadata*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    }
    else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ppx.metrics.reporting.MetricCounter.metadata)
}
inline ::ppx::metrics::reporting::MetricMetadata* MetricCounter::release_metadata()
{
    _impl_._has_bits_[0] &= ~0x00000001u;
    ::ppx::metrics::reporting::MetricMetadata* released = _impl_.metadata_;
    _impl_.metadata_                                    = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released  = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::ppx::metrics::reporting::MetricMetadata* MetricCounter::unsafe_arena_release_metadata()
{
    // @@protoc_insertion_point(field_release:ppx.metrics.reporting.MetricCounter.metadata)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::ppx::metrics::reporting::MetricMetadata* temp = _impl_.metadata_;
    _impl_.metadata_                                = nullptr;
    return temp;
}
inline ::ppx::metrics::reporting::MetricMetadata* MetricCounter::_internal_mutable_metadata()
{
    _impl_._has_bits_[0] |= 0x00000001u;
    if (_impl_.metadata_ == nullptr) {
        auto* p          = CreateMaybeMessage<::ppx::metrics::reporting::MetricMetadata>(GetArenaForAllocation());
        _impl_.metadata_ = reinterpret_cast<::ppx::metrics::reporting::MetricMetadata*>(p);
    }
    return _impl_.metadata_;
}
inline ::ppx::metrics::reporting::MetricMetadata* MetricCounter::mutable_metadata()
{
    ::ppx::metrics::reporting::MetricMetadata* _msg = _internal_mutable_metadata();
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.MetricCounter.metadata)
    return _msg;
}
inline void MetricCounter::set_allocated_metadata(::ppx::metrics::reporting::MetricMetadata* value)
{
    ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete reinterpret_cast<::ppx::metrics::reporting::MetricMetadata*>(_impl_.metadata_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena =
            ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::ppx::metrics::reporting::MetricMetadata*>(value));
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    }
    else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.metadata_ = reinterpret_cast<::ppx::metrics::reporting::MetricMetadata*>(value);
    // @@protoc_insertion_point(field_set_allocated:ppx.metrics.reporting.MetricCounter.metadata)
}

// int64 value = 2;
inline void MetricCounter::clear_value()
{
    _impl_.value_ = ::int64_t{0};
}
inline ::int64_t MetricCounter::value() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.MetricCounter.value)
    return _internal_value();
}
inline void MetricCounter::set_value(::int64_t value)
{
    _internal_set_value(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.MetricCounter.value)
}
inline ::int64_t MetricCounter::_internal_value() const
{
    return _impl_.value_;
}
inline void MetricCounter::_internal_set_value(::int64_t value)
{
    ;
    _impl_.value_ = value;
}

// -------------------------------------------------------------------

// GaugeStatistics

// double min = 1;
inline void GaugeStatistics::clear_min()
{
    _impl_.min_ = 0;
}
inline double GaugeStatistics::min() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.GaugeStatistics.min)
    return _internal_min();
}
inline void GaugeStatistics::set_min(double value)
{
    _internal_set_min(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.GaugeStatistics.min)
}
inline double GaugeStatistics::_internal_min() const
{
    return _impl_.min_;
}
inline void GaugeStatistics::_internal_set_min(double value)
{
    ;
    _impl_.min_ = value;
}

// double max = 2;
inline void GaugeStatistics::clear_max()
{
    _impl_.max_ = 0;
}
inline double GaugeStatistics::max() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.GaugeStatistics.max)
    return _internal_max();
}
inline void GaugeStatistics::set_max(double value)
{
    _internal_set_max(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.GaugeStatistics.max)
}
inline double GaugeStatistics::_internal_max() const
{
    return _impl_.max_;
}
inline void GaugeStatistics::_internal_set_max(double value)
{
    ;
    _impl_.max_ = value;
}

// double average = 3;
inline void GaugeStatistics::clear_average()
{
    _impl_.average_ = 0;
}
inline double GaugeStatistics::average() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.GaugeStatistics.average)
    return _internal_average();
}
inline void GaugeStatistics::set_average(double value)
{
    _internal_set_average(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.GaugeStatistics.average)
}
inline double GaugeStatistics::_internal_average() const
{
    return _impl_.average_;
}
inline void GaugeStatistics::_internal_set_average(double value)
{
    ;
    _impl_.average_ = value;
}

// double time_ratio = 4;
inline void GaugeStatistics::clear_time_ratio()
{
    _impl_.time_ratio_ = 0;
}
inline double GaugeStatistics::time_ratio() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.GaugeStatistics.time_ratio)
    return _internal_time_ratio();
}
inline void GaugeStatistics::set_time_ratio(double value)
{
    _internal_set_time_ratio(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.GaugeStatistics.time_ratio)
}
inline double GaugeStatistics::_internal_time_ratio() const
{
    return _impl_.time_ratio_;
}
inline void GaugeStatistics::_internal_set_time_ratio(double value)
{
    ;
    _impl_.time_ratio_ = value;
}

// double median = 5;
inline void GaugeStatistics::clear_median()
{
    _impl_.median_ = 0;
}
inline double GaugeStatistics::median() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.GaugeStatistics.median)
    return _internal_median();
}
inline void GaugeStatistics::set_median(double value)
{
    _internal_set_median(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.GaugeStatistics.median)
}
inline double GaugeStatistics::_internal_median() const
{
    return _impl_.median_;
}
inline void GaugeStatistics::_internal_set_median(double value)
{
    ;
    _impl_.median_ = value;
}

// double standard_deviation = 6;
inline void GaugeStatistics::clear_standard_deviation()
{
    _impl_.standard_deviation_ = 0;
}
inline double GaugeStatistics::standard_deviation() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.GaugeStatistics.standard_deviation)
    return _internal_standard_deviation();
}
inline void GaugeStatistics::set_standard_deviation(double value)
{
    _internal_set_standard_deviation(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.GaugeStatistics.standard_deviation)
}
inline double GaugeStatistics::_internal_standard_deviation() const
{
    return _impl_.standard_deviation_;
}
inline void GaugeStatistics::_internal_set_standard_deviation(double value)
{
    ;
    _impl_.standard_deviation_ = value;
}

// double percentile_90 = 7;
inline void GaugeStatistics::clear_percentile_90()
{
    _impl_.percentile_90_ = 0;
}
inline double GaugeStatistics::percentile_90() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.GaugeStatistics.percentile_90)
    return _internal_percentile_90();
}
inline void GaugeStatistics::set_percentile_90(double value)
{
    _internal_set_percentile_90(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.GaugeStatistics.percentile_90)
}
inline double GaugeStatistics::_internal_percentile_90() const
{
    return _impl_.percentile_90_;
}
inline void GaugeStatistics::_internal_set_percentile_90(double value)
{
    ;
    _impl_.percentile_90_ = value;
}

// double percentile_95 = 8;
inline void GaugeStatistics::clear_percentile_95()
{
    _impl_.percentile_95_ = 0;
}
inline double GaugeStatistics::percentile_95() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.GaugeStatistics.percentile_95)
    return _internal_percentile_95();
}
inline void GaugeStatistics::set_percentile_95(double value)
{
    _internal_set_percentile_95(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.GaugeStatistics.percentile_95)
}
inline double GaugeStatistics::_internal_percentile_95() const
{
    return _impl_.percentile_95_;
}
inline void GaugeStatistics::_internal_set_percentile_95(double value)
{
    ;
    _impl_.percentile_95_ = value;
}

// double percentile_99 = 9;
inline void GaugeStatistics::clear_percentile_99()
{
    _impl_.percentile_99_ = 0;
}
inline double GaugeStatistics::percentile_99() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.GaugeStatistics.percentile_99)
    return _internal_percentile_99();
}
inline void GaugeStatistics::set_percentile_99(double value)
{
    _internal_set_percentile_99(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.GaugeStatistics.percentile_99)
}
inline double GaugeStatistics::_internal_percentile_99() const
{
    return _impl_.percentile_99_;
}
inline void GaugeStatistics::_internal_set_percentile_99(double value)
{
    ;
    _impl_.percentile_99_ = value;
}

// -------------------------------------------------------------------

// TimeSeriesEntry

// double seconds = 1;
inline void TimeSeriesEntry::clear_seconds()
{
    _impl_.seconds_ = 0;
}
inline double TimeSeriesEntry::seconds() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.TimeSeriesEntry.seconds)
    return _internal_seconds();
}
inline void TimeSeriesEntry::set_seconds(double value)
{
    _internal_set_seconds(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.TimeSeriesEntry.seconds)
}
inline double TimeSeriesEntry::_internal_seconds() const
{
    return _impl_.seconds_;
}
inline void TimeSeriesEntry::_internal_set_seconds(double value)
{
    ;
    _impl_.seconds_ = value;
}

// double value = 2;
inline void TimeSeriesEntry::clear_value()
{
    _impl_.value_ = 0;
}
inline double TimeSeriesEntry::value() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.TimeSeriesEntry.value)
    return _internal_value();
}
inline void TimeSeriesEntry::set_value(double value)
{
    _internal_set_value(value);
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.TimeSeriesEntry.value)
}
inline double TimeSeriesEntry::_internal_value() const
{
    return _impl_.value_;
}
inline void TimeSeriesEntry::_internal_set_value(double value)
{
    ;
    _impl_.value_ = value;
}

// -------------------------------------------------------------------

// MetricGauge

// .ppx.metrics.reporting.MetricMetadata metadata = 1;
inline bool MetricGauge::has_metadata() const
{
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
    return value;
}
inline void MetricGauge::clear_metadata()
{
    if (_impl_.metadata_ != nullptr)
        _impl_.metadata_->Clear();
    _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ppx::metrics::reporting::MetricMetadata& MetricGauge::_internal_metadata() const
{
    const ::ppx::metrics::reporting::MetricMetadata* p = _impl_.metadata_;
    return p != nullptr ? *p : reinterpret_cast<const ::ppx::metrics::reporting::MetricMetadata&>(::ppx::metrics::reporting::_MetricMetadata_default_instance_);
}
inline const ::ppx::metrics::reporting::MetricMetadata& MetricGauge::metadata() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.MetricGauge.metadata)
    return _internal_metadata();
}
inline void MetricGauge::unsafe_arena_set_allocated_metadata(::ppx::metrics::reporting::MetricMetadata* value)
{
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
    }
    _impl_.metadata_ = reinterpret_cast<::ppx::metrics::reporting::MetricMetadata*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    }
    else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ppx.metrics.reporting.MetricGauge.metadata)
}
inline ::ppx::metrics::reporting::MetricMetadata* MetricGauge::release_metadata()
{
    _impl_._has_bits_[0] &= ~0x00000001u;
    ::ppx::metrics::reporting::MetricMetadata* released = _impl_.metadata_;
    _impl_.metadata_                                    = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released  = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::ppx::metrics::reporting::MetricMetadata* MetricGauge::unsafe_arena_release_metadata()
{
    // @@protoc_insertion_point(field_release:ppx.metrics.reporting.MetricGauge.metadata)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::ppx::metrics::reporting::MetricMetadata* temp = _impl_.metadata_;
    _impl_.metadata_                                = nullptr;
    return temp;
}
inline ::ppx::metrics::reporting::MetricMetadata* MetricGauge::_internal_mutable_metadata()
{
    _impl_._has_bits_[0] |= 0x00000001u;
    if (_impl_.metadata_ == nullptr) {
        auto* p          = CreateMaybeMessage<::ppx::metrics::reporting::MetricMetadata>(GetArenaForAllocation());
        _impl_.metadata_ = reinterpret_cast<::ppx::metrics::reporting::MetricMetadata*>(p);
    }
    return _impl_.metadata_;
}
inline ::ppx::metrics::reporting::MetricMetadata* MetricGauge::mutable_metadata()
{
    ::ppx::metrics::reporting::MetricMetadata* _msg = _internal_mutable_metadata();
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.MetricGauge.metadata)
    return _msg;
}
inline void MetricGauge::set_allocated_metadata(::ppx::metrics::reporting::MetricMetadata* value)
{
    ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete reinterpret_cast<::ppx::metrics::reporting::MetricMetadata*>(_impl_.metadata_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena =
            ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::ppx::metrics::reporting::MetricMetadata*>(value));
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    }
    else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.metadata_ = reinterpret_cast<::ppx::metrics::reporting::MetricMetadata*>(value);
    // @@protoc_insertion_point(field_set_allocated:ppx.metrics.reporting.MetricGauge.metadata)
}

// .ppx.metrics.reporting.GaugeStatistics statistics = 2;
inline bool MetricGauge::has_statistics() const
{
    bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.statistics_ != nullptr);
    return value;
}
inline void MetricGauge::clear_statistics()
{
    if (_impl_.statistics_ != nullptr)
        _impl_.statistics_->Clear();
    _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ppx::metrics::reporting::GaugeStatistics& MetricGauge::_internal_statistics() const
{
    const ::ppx::metrics::reporting::GaugeStatistics* p = _impl_.statistics_;
    return p != nullptr ? *p : reinterpret_cast<const ::ppx::metrics::reporting::GaugeStatistics&>(::ppx::metrics::reporting::_GaugeStatistics_default_instance_);
}
inline const ::ppx::metrics::reporting::GaugeStatistics& MetricGauge::statistics() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.MetricGauge.statistics)
    return _internal_statistics();
}
inline void MetricGauge::unsafe_arena_set_allocated_statistics(::ppx::metrics::reporting::GaugeStatistics* value)
{
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.statistics_);
    }
    _impl_.statistics_ = reinterpret_cast<::ppx::metrics::reporting::GaugeStatistics*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000002u;
    }
    else {
        _impl_._has_bits_[0] &= ~0x00000002u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ppx.metrics.reporting.MetricGauge.statistics)
}
inline ::ppx::metrics::reporting::GaugeStatistics* MetricGauge::release_statistics()
{
    _impl_._has_bits_[0] &= ~0x00000002u;
    ::ppx::metrics::reporting::GaugeStatistics* released = _impl_.statistics_;
    _impl_.statistics_                                   = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released  = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::ppx::metrics::reporting::GaugeStatistics* MetricGauge::unsafe_arena_release_statistics()
{
    // @@protoc_insertion_point(field_release:ppx.metrics.reporting.MetricGauge.statistics)

    _impl_._has_bits_[0] &= ~0x00000002u;
    ::ppx::metrics::reporting::GaugeStatistics* temp = _impl_.statistics_;
    _impl_.statistics_                               = nullptr;
    return temp;
}
inline ::ppx::metrics::reporting::GaugeStatistics* MetricGauge::_internal_mutable_statistics()
{
    _impl_._has_bits_[0] |= 0x00000002u;
    if (_impl_.statistics_ == nullptr) {
        auto* p            = CreateMaybeMessage<::ppx::metrics::reporting::GaugeStatistics>(GetArenaForAllocation());
        _impl_.statistics_ = reinterpret_cast<::ppx::metrics::reporting::GaugeStatistics*>(p);
    }
    return _impl_.statistics_;
}
inline ::ppx::metrics::reporting::GaugeStatistics* MetricGauge::mutable_statistics()
{
    ::ppx::metrics::reporting::GaugeStatistics* _msg = _internal_mutable_statistics();
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.MetricGauge.statistics)
    return _msg;
}
inline void MetricGauge::set_allocated_statistics(::ppx::metrics::reporting::GaugeStatistics* value)
{
    ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete reinterpret_cast<::ppx::metrics::reporting::GaugeStatistics*>(_impl_.statistics_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena =
            ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::ppx::metrics::reporting::GaugeStatistics*>(value));
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000002u;
    }
    else {
        _impl_._has_bits_[0] &= ~0x00000002u;
    }

    _impl_.statistics_ = reinterpret_cast<::ppx::metrics::reporting::GaugeStatistics*>(value);
    // @@protoc_insertion_point(field_set_allocated:ppx.metrics.reporting.MetricGauge.statistics)
}

// repeated .ppx.metrics.reporting.TimeSeriesEntry time_series = 3;
inline int MetricGauge::_internal_time_series_size() const
{
    return _impl_.time_series_.size();
}
inline int MetricGauge::time_series_size() const
{
    return _internal_time_series_size();
}
inline void MetricGauge::clear_time_series()
{
    _internal_mutable_time_series()->Clear();
}
inline ::ppx::metrics::reporting::TimeSeriesEntry* MetricGauge::mutable_time_series(int index)
{
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.MetricGauge.time_series)
    return _internal_mutable_time_series()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::TimeSeriesEntry>*
MetricGauge::mutable_time_series()
{
    // @@protoc_insertion_point(field_mutable_list:ppx.metrics.reporting.MetricGauge.time_series)
    return _internal_mutable_time_series();
}
inline const ::ppx::metrics::reporting::TimeSeriesEntry& MetricGauge::time_series(int index) const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.MetricGauge.time_series)
    return _internal_time_series().Get(index);
}
inline ::ppx::metrics::reporting::TimeSeriesEntry* MetricGauge::add_time_series()
{
    ::ppx::metrics::reporting::TimeSeriesEntry* _add = _internal_mutable_time_series()->Add();
    // @@protoc_insertion_point(field_add:ppx.metrics.reporting.MetricGauge.time_series)
    return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::TimeSeriesEntry>&
MetricGauge::time_series() const
{
    // @@protoc_insertion_point(field_list:ppx.metrics.reporting.MetricGauge.time_series)
    return _internal_time_series();
}
inline const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::TimeSeriesEntry>&
MetricGauge::_internal_time_series() const
{
    return _impl_.time_series_;
}
inline ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::TimeSeriesEntry>*
MetricGauge::_internal_mutable_time_series()
{
    return &_impl_.time_series_;
}

// -------------------------------------------------------------------

// Run

// string name = 1;
inline void Run::clear_name()
{
    _impl_.name_.ClearToEmpty();
}
inline const std::string& Run::name() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.Run.name)
    return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Run::set_name(Arg_&& arg, Args_... args)
{
    ;
    _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.Run.name)
}
inline std::string* Run::mutable_name()
{
    std::string* _s = _internal_mutable_name();
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.Run.name)
    return _s;
}
inline const std::string& Run::_internal_name() const
{
    return _impl_.name_.Get();
}
inline void Run::_internal_set_name(const std::string& value)
{
    ;
    _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Run::_internal_mutable_name()
{
    ;
    return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Run::release_name()
{
    // @@protoc_insertion_point(field_release:ppx.metrics.reporting.Run.name)
    return _impl_.name_.Release();
}
inline void Run::set_allocated_name(std::string* value)
{
    _impl_.name_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.name_.IsDefault()) {
        _impl_.name_.Set("", GetArenaForAllocation());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:ppx.metrics.reporting.Run.name)
}

// repeated .ppx.metrics.reporting.MetricCounter counters = 2;
inline int Run::_internal_counters_size() const
{
    return _impl_.counters_.size();
}
inline int Run::counters_size() const
{
    return _internal_counters_size();
}
inline void Run::clear_counters()
{
    _internal_mutable_counters()->Clear();
}
inline ::ppx::metrics::reporting::MetricCounter* Run::mutable_counters(int index)
{
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.Run.counters)
    return _internal_mutable_counters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricCounter>*
Run::mutable_counters()
{
    // @@protoc_insertion_point(field_mutable_list:ppx.metrics.reporting.Run.counters)
    return _internal_mutable_counters();
}
inline const ::ppx::metrics::reporting::MetricCounter& Run::counters(int index) const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.Run.counters)
    return _internal_counters().Get(index);
}
inline ::ppx::metrics::reporting::MetricCounter* Run::add_counters()
{
    ::ppx::metrics::reporting::MetricCounter* _add = _internal_mutable_counters()->Add();
    // @@protoc_insertion_point(field_add:ppx.metrics.reporting.Run.counters)
    return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricCounter>&
Run::counters() const
{
    // @@protoc_insertion_point(field_list:ppx.metrics.reporting.Run.counters)
    return _internal_counters();
}
inline const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricCounter>&
Run::_internal_counters() const
{
    return _impl_.counters_;
}
inline ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricCounter>*
Run::_internal_mutable_counters()
{
    return &_impl_.counters_;
}

// repeated .ppx.metrics.reporting.MetricGauge gauges = 3;
inline int Run::_internal_gauges_size() const
{
    return _impl_.gauges_.size();
}
inline int Run::gauges_size() const
{
    return _internal_gauges_size();
}
inline void Run::clear_gauges()
{
    _internal_mutable_gauges()->Clear();
}
inline ::ppx::metrics::reporting::MetricGauge* Run::mutable_gauges(int index)
{
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.Run.gauges)
    return _internal_mutable_gauges()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricGauge>*
Run::mutable_gauges()
{
    // @@protoc_insertion_point(field_mutable_list:ppx.metrics.reporting.Run.gauges)
    return _internal_mutable_gauges();
}
inline const ::ppx::metrics::reporting::MetricGauge& Run::gauges(int index) const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.Run.gauges)
    return _internal_gauges().Get(index);
}
inline ::ppx::metrics::reporting::MetricGauge* Run::add_gauges()
{
    ::ppx::metrics::reporting::MetricGauge* _add = _internal_mutable_gauges()->Add();
    // @@protoc_insertion_point(field_add:ppx.metrics.reporting.Run.gauges)
    return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricGauge>&
Run::gauges() const
{
    // @@protoc_insertion_point(field_list:ppx.metrics.reporting.Run.gauges)
    return _internal_gauges();
}
inline const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricGauge>&
Run::_internal_gauges() const
{
    return _impl_.gauges_;
}
inline ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::MetricGauge>*
Run::_internal_mutable_gauges()
{
    return &_impl_.gauges_;
}

// -------------------------------------------------------------------

// Report

// string name = 1;
inline void Report::clear_name()
{
    _impl_.name_.ClearToEmpty();
}
inline const std::string& Report::name() const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.Report.name)
    return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Report::set_name(Arg_&& arg, Args_... args)
{
    ;
    _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:ppx.metrics.reporting.Report.name)
}
inline std::string* Report::mutable_name()
{
    std::string* _s = _internal_mutable_name();
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.Report.name)
    return _s;
}
inline const std::string& Report::_internal_name() const
{
    return _impl_.name_.Get();
}
inline void Report::_internal_set_name(const std::string& value)
{
    ;
    _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Report::_internal_mutable_name()
{
    ;
    return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Report::release_name()
{
    // @@protoc_insertion_point(field_release:ppx.metrics.reporting.Report.name)
    return _impl_.name_.Release();
}
inline void Report::set_allocated_name(std::string* value)
{
    _impl_.name_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.name_.IsDefault()) {
        _impl_.name_.Set("", GetArenaForAllocation());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:ppx.metrics.reporting.Report.name)
}

// repeated .ppx.metrics.reporting.Run runs = 2;
inline int Report::_internal_runs_size() const
{
    return _impl_.runs_.size();
}
inline int Report::runs_size() const
{
    return _internal_runs_size();
}
inline void Report::clear_runs()
{
    _internal_mutable_runs()->Clear();
}
inline ::ppx::metrics::reporting::Run* Report::mutable_runs(int index)
{
    // @@protoc_insertion_point(field_mutable:ppx.metrics.reporting.Report.runs)
    return _internal_mutable_runs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::Run>*
Report::mutable_runs()
{
    // @@protoc_insertion_point(field_mutable_list:ppx.metrics.reporting.Report.runs)
    return _internal_mutable_runs();
}
inline const ::ppx::metrics::reporting::Run& Report::runs(int index) const
{
    // @@protoc_insertion_point(field_get:ppx.metrics.reporting.Report.runs)
    return _internal_runs().Get(index);
}
inline ::ppx::metrics::reporting::Run* Report::add_runs()
{
    ::ppx::metrics::reporting::Run* _add = _internal_mutable_runs()->Add();
    // @@protoc_insertion_point(field_add:ppx.metrics.reporting.Report.runs)
    return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::Run>&
Report::runs() const
{
    // @@protoc_insertion_point(field_list:ppx.metrics.reporting.Report.runs)
    return _internal_runs();
}
inline const ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::Run>&
Report::_internal_runs() const
{
    return _impl_.runs_;
}
inline ::google::protobuf::RepeatedPtrField<::ppx::metrics::reporting::Run>*
Report::_internal_mutable_runs()
{
    return &_impl_.runs_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__

// @@protoc_insertion_point(namespace_scope)
} // namespace reporting
} // namespace metrics
} // namespace ppx

namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ppx::metrics::reporting::Interpretation> : std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ppx::metrics::reporting::Interpretation>()
{
    return ::ppx::metrics::reporting::Interpretation_descriptor();
}

} // namespace protobuf
} // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif // GOOGLE_PROTOBUF_INCLUDED_metrics_5freport_2eproto_2epb_2eh
